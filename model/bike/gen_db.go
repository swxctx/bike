// generated by ginpt
package bike

import (
	"database/sql"

	"github.com/domego/ginkits/db"
	"github.com/domego/gokits/log"
	"github.com/domego/gorp"
	_ "github.com/go-sql-driver/mysql"
	"gopkg.in/redis.v3"
)

var (
	DBConfig    *db.DBConfig
	RedisClient *redis.Client
	// DefaultCacheTTL 默认CACHE时间1天
	DefaultCacheTTL = 24 * 60 * 60

	dbInfo       *db.DBInfo
	serialDBInfo *db.DBInfo
)

func GetDB() *db.DBInfo {
	if dbInfo != nil {
		return dbInfo
	}
	database, err := sql.Open("mysql", DBConfig.Source())
	if err != nil {
		panic(err)
	}
	if DBConfig.MaxIdleConns != 0 {
		database.SetMaxIdleConns(DBConfig.MaxIdleConns)
	}
	if DBConfig.MaxOpenConns != 0 {
		database.SetMaxOpenConns(DBConfig.MaxOpenConns)
	}
	dbmap := &gorp.DbMap{Db: database, Dialect: gorp.MySQLDialect{}}
	dbmap.AddTableWithName(Admin{}, "admin").SetKeys(true, "id")
	dbmap.AddTableWithName(Bike{}, "bike").SetKeys(true, "id")
	dbmap.AddTableWithName(TopLog{}, "top_log").SetKeys(true, "id")
	dbmap.AddTableWithName(UseLog{}, "use_log").SetKeys(true, "id")
	dbmap.AddTableWithName(User{}, "user").SetKeys(true, "id")
	dbmap.AddTableWithName(UserBag{}, "user_bag").SetKeys(true, "id")
	dbmap.AddTableWithName(UserMeta{}, "user_meta").SetKeys(true, "id")

	dbmap.TraceOn("", log.DefaultLogger)

	dbInfo = &db.DBInfo{DB: database, DbMap: dbmap}
	return dbInfo
}

func GetSerialDB() *db.DBInfo {
	if serialDBInfo != nil {
		return serialDBInfo
	}
	database, err := sql.Open("mysql", DBConfig.SerialSource())
	if err != nil {
		panic(err)
	}
	if DBConfig.MaxIdleConns != 0 {
		database.SetMaxIdleConns(DBConfig.MaxIdleConns)
	}
	if DBConfig.MaxOpenConns != 0 {
		database.SetMaxOpenConns(DBConfig.MaxOpenConns)
	}
	dbmap := &gorp.DbMap{Db: database, Dialect: gorp.MySQLDialect{}}
	dbmap.AddTableWithName(Admin{}, "admin").SetKeys(true, "id")
	dbmap.AddTableWithName(Bike{}, "bike").SetKeys(true, "id")
	dbmap.AddTableWithName(TopLog{}, "top_log").SetKeys(true, "id")
	dbmap.AddTableWithName(UseLog{}, "use_log").SetKeys(true, "id")
	dbmap.AddTableWithName(User{}, "user").SetKeys(true, "id")
	dbmap.AddTableWithName(UserBag{}, "user_bag").SetKeys(true, "id")
	dbmap.AddTableWithName(UserMeta{}, "user_meta").SetKeys(true, "id")

	dbmap.TraceOn("", log.DefaultLogger)

	serialDBInfo = &db.DBInfo{DB: database, DbMap: dbmap}
	return serialDBInfo
}

func CloseDB() {
	if dbInfo != nil {
		dbInfo.DB.Close()
	}
	dbInfo = nil
}
