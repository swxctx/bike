// generated by ginpt
package bike

import (
	"bytes"
	"database/sql"
	"fmt"
	"time"

	"github.com/domego/ginkits/db"
	"github.com/domego/ginkits/redis"
	"github.com/domego/gokits"
	"github.com/domego/gokits/log"
	"github.com/domego/gorp"
)

var _ = time.Now
var _ = fmt.Println
var _ = sql.ErrNoRows
var _ = bytes.NewBuffer
var _ = utils.Int32

type UserBag struct {
	Id        int32     `db:"id" json:"id"`
	Uid       int32     `db:"uid" json:"uid"`
	Balance   int32     `db:"balance" json:"balance"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
	UpdatedAt time.Time `db:"updated_at" json:"updated_at"`
	Deleted   byte      `db:"deleted" json:"deleted"`

	_db *db.DBInfo      `db:"-"`
	_tx *db.Transaction `db:"-"`
}

func NewUserBag() *UserBag {
	obj := NewUserBagWithoutDB()
	obj.SetDBInfo()
	return obj
}

func NewUserBagWithoutDB() *UserBag {
	obj := &UserBag{}
	return obj
}

func (obj *UserBag) SetDBInfo() {
	database := GetDB()
	obj._db = &db.DBInfo{
		DB:    database.DB,
		DbMap: database.DbMap,
	}
}

func (obj *UserBag) SetTransaction(tx *db.Transaction) {
	obj._tx = tx
}

func (obj *UserBag) GetSqlExecutor() gorp.SqlExecutor {
	if obj._tx != nil {
		return obj._tx
	}
	return obj._db
}

func (obj *UserBag) PrimaryCacheKey() string {
	return fmt.Sprintf("bike:orm:user_bag:id:%v", obj.Id)
}

func (obj *UserBag) SaveToCache() error {
	if RedisClient != nil {
		return rediskits.SetModelToCache(RedisClient, obj.PrimaryCacheKey(), obj, DefaultCacheTTL)
	}
	return nil
}

func (obj *UserBag) DeleteCache() error {
	if RedisClient != nil {
		return rediskits.DeleteCache(RedisClient, obj.PrimaryCacheKey(), 3)
	}
	return nil
}

func (obj *UserBag) Insert() {
	database := obj.GetSqlExecutor()

	obj.CreatedAt = time.Now()

	obj.UpdatedAt = time.Now()

	err := database.Insert(obj)
	if err != nil {
		panic(err)
	}
	if err = obj.SaveToCache(); err != nil {
		log.Errorf("[CacheKey:%s], %s", obj.PrimaryCacheKey(), err)
	}
}

func (obj *UserBag) Update() {
	var err error
	database := obj.GetSqlExecutor()

	obj.UpdatedAt = time.Now()

	_, err = database.Update(obj)
	if err != nil {
		panic(err)
	}
	if err = obj.SaveToCache(); err != nil {
		log.Errorf("[CacheKey:%s], %s", obj.PrimaryCacheKey(), err)
	}
}

func (obj *UserBag) Delete() {

	obj.Deleted = 1

	obj.Update()

}

func GetUserBagWhere(cond string, args ...interface{}) []*UserBag {
	objs := []*UserBag{}
	database := GetDB()
	_, err := database.Select(&objs, "SELECT `id`, `uid`, `balance`, `created_at`, `updated_at`, `deleted` FROM `user_bag` WHERE "+cond, args...)
	if err != nil {
		panic(err)
	}
	for _, obj := range objs {
		obj.SetDBInfo()
	}
	return objs
}

func GetUserBagCount(cond string, args ...interface{}) int64 {
	database := GetDB()
	cnt, err := database.SelectInt("SELECT count(1) FROM `user_bag` WHERE "+cond, args...)
	if err != nil {
		panic(err)
	}
	return cnt
}

func GetUserBagFirst(cond string, args ...interface{}) *UserBag {
	obj := &UserBag{}
	database := GetDB()
	err := database.SelectOne(obj, "SELECT `id`, `uid`, `balance`, `created_at`, `updated_at`, `deleted` FROM `user_bag` WHERE "+cond+" LIMIT 1", args...)
	if err != nil {
		if err.Error() == sql.ErrNoRows.Error() {
			return nil
		}
		panic(err)
	}
	obj.SetDBInfo()
	return obj
}

func GetUserBagByField(name string, field interface{}) *UserBag {
	obj := &UserBag{}
	database := GetDB()
	err := database.SelectOne(obj, "SELECT `id`, `uid`, `balance`, `created_at`, `updated_at`, `deleted` FROM `user_bag` WHERE `"+name+"`=?", field)
	if err != nil {
		if err.Error() == sql.ErrNoRows.Error() {
			return nil
		}
		panic(err)
	}
	obj.SetDBInfo()
	return obj
}

func GetUserBagByFieldWithCondition(name, cond string, field interface{}) *UserBag {
	obj := &UserBag{}
	database := GetDB()
	err := database.SelectOne(obj, "SELECT `id`, `uid`, `balance`, `created_at`, `updated_at`, `deleted` FROM `user_bag` WHERE `"+name+"`=? "+cond, field)
	if err != nil {
		if err.Error() == sql.ErrNoRows.Error() {
			return nil
		}
		panic(err)
	}
	obj.SetDBInfo()
	return obj
}

func GetUserBag(key int32) *UserBag {
	obj := &UserBag{}
	var notFound = true
	var err error
	if RedisClient != nil {
		obj.Id = key
		notFound = rediskits.GetCacheToModel(RedisClient, obj.PrimaryCacheKey(), obj)
	}
	if notFound {
		database := GetDB()
		err = database.SelectOne(obj, "SELECT `id`, `uid`, `balance`, `created_at`, `updated_at`, `deleted` FROM `user_bag` WHERE `id`=?", key)
		if err != nil {
			if err.Error() == sql.ErrNoRows.Error() {
				return nil
			}
			panic(err)
		}
	}
	if notFound && RedisClient != nil {
		if err = obj.SaveToCache(); err != nil {
			log.Errorf("[CacheKey:%s], %s", obj.PrimaryCacheKey(), err)
		}
	}
	obj.SetDBInfo()
	return obj
}
